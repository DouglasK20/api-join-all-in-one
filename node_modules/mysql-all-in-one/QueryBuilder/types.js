"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSqlExpressionPreparedStatement = exports.SqlExp = exports.SqlColumn = exports.generateQueryFromPreparedStatement = exports.isPreparedStatement = exports.emptyPrepStatement = exports.isArrayOfStrings = exports.isSqlValues = void 0;
const utils_1 = require("./utils");
const isSqlValues = (val) => val === null ||
    val === undefined ||
    (["string", "boolean", "number", "object"].includes(typeof val) &&
        !Array.isArray(val) &&
        (typeof val !== "object" || val instanceof Date));
exports.isSqlValues = isSqlValues;
const isArrayOfStrings = (val) => val !== undefined &&
    val !== null &&
    Array.isArray(val) &&
    val.every((v) => typeof v === "string");
exports.isArrayOfStrings = isArrayOfStrings;
exports.emptyPrepStatement = {
    statement: "",
    values: [],
    __is_prep_statement: true,
};
const isPreparedStatement = (val) => val !== undefined &&
    val !== null &&
    !Array.isArray(val) &&
    typeof val === "object" &&
    Object.keys(val).length === 3 &&
    typeof val.statement === "string" &&
    val.statement !== "" &&
    val.__is_prep_statement === true &&
    Array.isArray(val.values) &&
    (val.values.length === 0 || val.values.every((v) => (0, exports.isSqlValues)(v)));
exports.isPreparedStatement = isPreparedStatement;
const generateQueryFromPreparedStatement = (preparedStatement) => {
    let { statement, values } = preparedStatement;
    if (typeof statement !== "string")
        return "";
    if ((0, exports.isPreparedStatement)(statement))
        return statement || "";
    statement = `${statement.split(";").join("")};`;
    const pieces = statement.split("?");
    const firstPiece = pieces.shift();
    return (pieces.reduce((acc, cur, i) => `${acc}${(0, utils_1.escVal)(values[i])}${cur}`, firstPiece) || "");
};
exports.generateQueryFromPreparedStatement = generateQueryFromPreparedStatement;
class SqlColumn {
    constructor(column) {
        this.column = column;
    }
}
exports.SqlColumn = SqlColumn;
class SqlExp {
    constructor(expression) {
        this.expression = expression;
    }
}
exports.SqlExp = SqlExp;
const isSqlExpressionPreparedStatement = (val) => val !== null &&
    typeof val === 'object' &&
    typeof val.statement === 'string' &&
    Array.isArray(val.values) &&
    val.values.every((v) => (0, exports.isSqlValues)(v)) &&
    val.__is_prep_statement === true;
exports.isSqlExpressionPreparedStatement = isSqlExpressionPreparedStatement;
