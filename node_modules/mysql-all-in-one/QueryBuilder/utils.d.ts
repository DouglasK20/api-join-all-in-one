import mysql from 'mysql2';
import { SqlColumn, SqlExp, SqlExpressionPreparedStatement, SqlValues } from "./types";
/**
 * Escapes a value into a valid mysql String representation
 */
export declare const escVal: typeof mysql.escape;
/**
 *
 * @description Tagged template literal function to create sql expressions, will automatically escape interpolated variables to valid sql values or if will escape column names if combined with `sqlCol` function, or to complete ignore a string use `sqlExp` function;
 * @example sqlExpression`STR_TO_DATE(${sqlCol('date')}, "%d/%m/%Y") = ${new Date(2020, 8, 30)} AND ${sqlCol('date') > ${sqlCol('another_table.date')`
 * >> 'STR_TO_DATE(date, "%d/%m/%Y") = "2020-8-30" AND date > '
 */
export declare const sqlExpression: ([firstStr, ...rest]: TemplateStringsArray, ...values: Array<SqlValues | SqlColumn | Record<string, any>>) => Record<string, any>;
/**
 * @description Tagged template literal function to escape all passed values
 * @example const name = 'Foo'; escStr`name=${name}`;
 * >> "name = 'Foo'"
 */
export declare const escStr: ([firstStr, ...rest]: TemplateStringsArray, ...values: Array<SqlValues | SqlColumn>) => string;
export declare const escapeNames: (key: string) => string;
export declare const putBackticks: (value: string) => string;
export declare const putBrackets: (value: string) => string;
/**
 *
 * @param tableRef
 * @returns [table, alias]
 */
export declare const extractTableAlias: (tableRef: string) => Array<string>;
export declare const safeApplyAlias: (subject: string, alias?: string | undefined) => string;
export declare const isNotEmptyString: (val: any) => val is string;
/**
 *
 * @description Will return SqlColumn object, that is interpretated as a column, not as a string. Can be used in WHERE, sqlExpression
 * @example
 * {where: {date: sqlCol('another_table.date')}}
 * >> WHERE `date` = `another_table`.`date`
 */
export declare const sqlCol: (column: string) => SqlColumn;
export declare const sqlExp: (column: string) => SqlExp;
export declare const placeAliasInSqlExpression: (sqlExpression: SqlExpressionPreparedStatement, alias: string | null | undefined) => SqlExpressionPreparedStatement;
