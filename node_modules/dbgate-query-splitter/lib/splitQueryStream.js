"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.splitQueryStream = exports.SplitQueryStream = void 0;
const stream_1 = __importDefault(require("stream"));
const splitQuery_1 = require("./splitQuery");
class SplitQueryStream extends stream_1.default.Transform {
    constructor(options) {
        super({ objectMode: true });
        this.context = {
            commandPart: '',
            commandStartLine: 0,
            commandStartColumn: 0,
            commandStartPosition: 0,
            streamPosition: 0,
            line: 0,
            column: 0,
            options,
            currentDelimiter: (0, splitQuery_1.getInitialDelimiter)(options),
            pushOutput: cmd => this.push(cmd),
        };
    }
    _transform(chunk, encoding, done) {
        const lineContext = Object.assign(Object.assign({}, this.context), { position: 0, currentCommandStart: 0, wasDataOnLine: false, source: chunk, end: chunk.length });
        (0, splitQuery_1.splitQueryLine)(lineContext);
        this.context.commandPart = lineContext.commandPart;
        done();
    }
    _flush(done) {
        (0, splitQuery_1.finishSplitStream)(this.context);
        done();
    }
}
exports.SplitQueryStream = SplitQueryStream;
function splitQueryStream(sourceStream, options) {
    const splitter = new SplitQueryStream(options);
    sourceStream.pipe(splitter);
    return splitter;
}
exports.splitQueryStream = splitQueryStream;
